Description: This stack includes resources needed to deploy AWS CDK apps into this environment
Parameters:
  TrustedAccounts:
    Description: List of AWS accounts that are trusted to publish assets and deploy stacks to this environment
    Default: ""
    Type: CommaDelimitedList
  TrustedAccountsForLookup:
    Description: List of AWS accounts that are trusted to look up values in this environment
    Default: ""
    Type: CommaDelimitedList
  CloudFormationExecutionPolicies:
    Description: List of the ManagedPolicy ARN(s) to attach to the CloudFormation deployment role
    Default: ""
    Type: CommaDelimitedList
  FileAssetsBucketName:
    Description: The name of the S3 bucket used for file assets
    Default: ""
    Type: String
  FileAssetsBucketKmsKeyId:
    Description: Empty to create a new key (default), 'AWS_MANAGED_KEY' to use a managed S3 key, or the ID/ARN of an existing key.
    Default: ""
    Type: String
  ContainerAssetsRepositoryName:
    Description: A user-provided custom name to use for the container assets ECR repository
    Default: ""
    Type: String
  Qualifier:
    Description: An identifier to distinguish multiple bootstrap stacks in the same environment
    Default: hnb659fds
    Type: String
    AllowedPattern: "[A-Za-z0-9_-]{1,10}"
    ConstraintDescription: Qualifier must be an alphanumeric identifier of at most 10 characters
  PublicAccessBlockConfiguration:
    Description: Whether or not to enable S3 Staging Bucket Public Access Block Configuration
    Default: "true"
    Type: String
    AllowedValues:
      - "true"
      - "false"
  InputPermissionsBoundary:
    Description: Whether or not to use either the CDK supplied or custom permissions boundary
    Default: ""
    Type: String
  UseExamplePermissionsBoundary:
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Type: String
  BootstrapVariant:
    Type: String
    Default: "AWS CDK: Customized for ADSK-Boundary with Amplify Support"
    Description: Describe the provenance of the resources in this bootstrap stack. Change this when you customize the template. To prevent accidents, the CDK CLI will not overwrite bootstrap stacks with a different variant.
  DenyExternalId:
    # By default, CDK Bootstrap roles are not designed to be deputized.
    # Deputized means that you give an external entity access to assume roles on
    # your behalf. They will supply an ExternalId to avoid Confused Deputy
    # attacks (https://docs.aws.amazon.com/IAM/latest/UserGuide/confused-deputy.html).
    #
    # AssumeRole calls with ExternalIds will be denied by default, set this to 'false'
    # if you need this functionality for some reason.
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Whether to deny AssumeRole calls with an ExternalId. This prevents calls that are intended to be deputized from accidentally assuming CDK Roles.
Conditions:
  HasTrustedAccounts:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Fn::Join:
              - ""
              - Ref: TrustedAccounts
  HasTrustedAccountsForLookup:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Fn::Join:
              - ""
              - Ref: TrustedAccountsForLookup
  HasCloudFormationExecutionPolicies:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Fn::Join:
              - ""
              - Ref: CloudFormationExecutionPolicies
  HasCustomFileAssetsBucketName:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: FileAssetsBucketName
  CreateNewKey:
    Fn::Equals:
      - ""
      - Ref: FileAssetsBucketKmsKeyId
  UseAwsManagedKey:
    Fn::Equals:
      - AWS_MANAGED_KEY
      - Ref: FileAssetsBucketKmsKeyId
  ShouldCreatePermissionsBoundary:
    Fn::Equals:
      - "true"
      - Ref: UseExamplePermissionsBoundary
  PermissionsBoundarySet:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: InputPermissionsBoundary
  HasCustomContainerAssetsRepositoryName:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: ContainerAssetsRepositoryName
  UsePublicAccessBlockConfiguration:
    Fn::Equals:
      - "true"
      - Ref: PublicAccessBlockConfiguration
  ShouldDenyExternalId:
    Fn::Equals:
      - 'true'
      - Ref: DenyExternalId
Resources:
  FileAssetsBucketEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
          - Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:GenerateDataKey
              - kms:TagResource
              - kms:UntagResource
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
            Resource: "*"
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Principal:
              AWS: "*"
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount:
                  Ref: AWS::AccountId
                kms:ViaService:
                  - Fn::Sub: s3.${AWS::Region}.amazonaws.com
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: ${FilePublishingRole.Arn}
            Resource: "*"
    Condition: CreateNewKey
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  FileAssetsBucketEncryptionKeyAlias:
    Condition: CreateNewKey
    Type: AWS::KMS::Alias
    Properties:
      AliasName:
        Fn::Sub: alias/cdk-${Qualifier}-assets-key
      TargetKeyId:
        Ref: FileAssetsBucketEncryptionKey
  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::If:
          - HasCustomFileAssetsBucketName
          - Fn::Sub: ${FileAssetsBucketName}
          - Fn::Sub: cdk-${Qualifier}-assets-${AWS::AccountId}-${AWS::Region}
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID:
                Fn::If:
                  - CreateNewKey
                  - Fn::Sub: ${FileAssetsBucketEncryptionKey.Arn}
                  - Fn::If:
                      - UseAwsManagedKey
                      - Ref: AWS::NoValue
                      - Fn::Sub: ${FileAssetsBucketKmsKeyId}
      PublicAccessBlockConfiguration:
        Fn::If:
          - UsePublicAccessBlockConfiguration
          - BlockPublicAcls: true
            BlockPublicPolicy: true
            IgnorePublicAcls: true
            RestrictPublicBuckets: true
          - Ref: AWS::NoValue
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: CleanupOldVersions
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 30
          - Id: AbortIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  StagingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StagingBucket
      PolicyDocument:
        Id: AccessControl
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - Fn::Sub: ${StagingBucket.Arn}
              - Fn::Sub: ${StagingBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Principal: "*"
  ContainerAssetsRepository:
    Type: AWS::ECR::Repository
    Properties:
      ImageTagMutability: IMMUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Untagged images should not exist, but expire any older than one year",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 365
                },
                "action": { "type": "expire" }
              }
            ]
          }
      RepositoryName:
        Fn::If:
          - HasCustomContainerAssetsRepositoryName
          - Fn::Sub: ${ContainerAssetsRepositoryName}
          - Fn::Sub: cdk-${Qualifier}-container-assets-${AWS::AccountId}-${AWS::Region}
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: LambdaECRImageRetrievalPolicy
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Condition:
              StringLike:
                aws:sourceArn:
                  Fn::Sub: arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*
          - Sid: EmrServerlessImageRetrievalPolicy
            Effect: Allow
            Principal:
              Service: emr-serverless.amazonaws.com
            Action:
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
              - ecr:DescribeImages
            Condition:
              StringLike:
                aws:sourceArn:
                  Fn::Sub: arn:${AWS::Partition}:emr-serverless:${AWS::Region}:${AWS::AccountId}:/applications/*
  FilePublishingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          # AssumeRole for same account (no ExternalId)
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
            Condition:
              Fn::If:
                - ShouldDenyExternalId
                - "Null":
                    "sts:ExternalId": "true"
                - Ref: AWS::NoValue
          # TagSession for same account
          - Action: sts:TagSession
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
            Condition:
              Fn::If:
                - ShouldDenyExternalId
                - "Null":
                    "sts:ExternalId": "true"
                - Ref: AWS::NoValue
          # AssumeRole for trusted accounts (no ExternalId)
          - Fn::If:
              - HasTrustedAccounts
              - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                  AWS:
                    Ref: TrustedAccounts
                Condition:
                  Fn::If:
                    - ShouldDenyExternalId
                    - "Null":
                        "sts:ExternalId": "true"
                    - Ref: AWS::NoValue
              - Ref: AWS::NoValue
        Version: '2012-10-17'
      RoleName:
        Fn::Sub: cdk-${Qualifier}-file-publishing-role-${AWS::AccountId}-${AWS::Region}
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: file-publishing
  ImagePublishingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          # AssumeRole for same account (no ExternalId)
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
            Condition:
              Fn::If:
                - ShouldDenyExternalId
                - "Null":
                    "sts:ExternalId": "true"
                - Ref: AWS::NoValue
          # TagSession for same account
          - Action: sts:TagSession
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
            Condition:
              Fn::If:
                - ShouldDenyExternalId
                - "Null":
                    "sts:ExternalId": "true"
                - Ref: AWS::NoValue
          # AssumeRole for trusted accounts (no ExternalId)
          - Fn::If:
              - HasTrustedAccounts
              - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                  AWS:
                    Ref: TrustedAccounts
                Condition:
                  Fn::If:
                    - ShouldDenyExternalId
                    - "Null":
                        "sts:ExternalId": "true"
                    - Ref: AWS::NoValue
              - Ref: AWS::NoValue
        Version: '2012-10-17'
      RoleName:
        Fn::Sub: cdk-${Qualifier}-image-publishing-role-${AWS::AccountId}-${AWS::Region}
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: image-publishing
  LookupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          # AssumeRole for same account (no ExternalId)
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
            Condition:
              Fn::If:
                - ShouldDenyExternalId
                - "Null":
                    "sts:ExternalId": "true"
                - Ref: AWS::NoValue
          # TagSession for same account
          - Action: sts:TagSession
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
            Condition:
              Fn::If:
                - ShouldDenyExternalId
                - "Null":
                    "sts:ExternalId": "true"
                - Ref: AWS::NoValue
          # AssumeRole for trusted accounts for lookup (no ExternalId)
          - Fn::If:
              - HasTrustedAccountsForLookup
              - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                  AWS:
                    Ref: TrustedAccountsForLookup
                Condition:
                  Fn::If:
                    - ShouldDenyExternalId
                    - "Null":
                        "sts:ExternalId": "true"
                    - Ref: AWS::NoValue
              - Ref: AWS::NoValue
          # AssumeRole for trusted accounts (no ExternalId)
          - Fn::If:
              - HasTrustedAccounts
              - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                  AWS:
                    Ref: TrustedAccounts
                Condition:
                  Fn::If:
                    - ShouldDenyExternalId
                    - "Null":
                        "sts:ExternalId": "true"
                    - Ref: AWS::NoValue
              - Ref: AWS::NoValue
        Version: '2012-10-17'
      RoleName:
        Fn::Sub: cdk-${Qualifier}-lookup-role-${AWS::AccountId}-${AWS::Region}
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/ReadOnlyAccess
      Policies:
        - PolicyDocument:
            Statement:
              - Sid: DontReadSecrets
                Effect: Deny
                Action:
                  - kms:Decrypt
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: LookupRolePolicy
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: lookup
  FilePublishingRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:GetEncryptionConfiguration
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Resource:
              - Fn::Sub: ${StagingBucket.Arn}
              - Fn::Sub: ${StagingBucket.Arn}/*
            Condition:
              StringEquals:
                aws:ResourceAccount:
                  - Fn::Sub: ${AWS::AccountId}
            Effect: Allow
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Resource:
              Fn::If:
                - CreateNewKey
                - Fn::Sub: ${FileAssetsBucketEncryptionKey.Arn}
                - Fn::Sub: arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${FileAssetsBucketKmsKeyId}
        Version: "2012-10-17"
      Roles:
        - Ref: FilePublishingRole
      PolicyName:
        Fn::Sub: cdk-${Qualifier}-file-publishing-role-default-policy-${AWS::AccountId}-${AWS::Region}
  ImagePublishingRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecr:PutImage
              - ecr:InitiateLayerUpload
              - ecr:UploadLayerPart
              - ecr:CompleteLayerUpload
              - ecr:BatchCheckLayerAvailability
              - ecr:DescribeRepositories
              - ecr:DescribeImages
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Resource:
              Fn::Sub: ${ContainerAssetsRepository.Arn}
            Effect: Allow
          - Action:
              - ecr:GetAuthorizationToken
            Resource: "*"
            Effect: Allow
        Version: "2012-10-17"
      Roles:
        - Ref: ImagePublishingRole
      PolicyName:
        Fn::Sub: cdk-${Qualifier}-image-publishing-role-default-policy-${AWS::AccountId}-${AWS::Region}
  DeploymentActionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          # AssumeRole for same account (no ExternalId)
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
            Condition:
              Fn::If:
                - ShouldDenyExternalId
                - "Null":
                    "sts:ExternalId": "true"
                - Ref: AWS::NoValue
          # TagSession for same account
          - Action: sts:TagSession
            Effect: Allow
            Principal:
              AWS:
                Ref: AWS::AccountId
            Condition:
              Fn::If:
                - ShouldDenyExternalId
                - "Null":
                    "sts:ExternalId": "true"
                - Ref: AWS::NoValue
          # AssumeRole for trusted accounts (no ExternalId)
          - Fn::If:
              - HasTrustedAccounts
              - Action: sts:AssumeRole
                Effect: Allow
                Principal:
                  AWS:
                    Ref: TrustedAccounts
                Condition:
                  Fn::If:
                    - ShouldDenyExternalId
                    - "Null":
                        "sts:ExternalId": "true"
                    - Ref: AWS::NoValue
              - Ref: AWS::NoValue
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Sid: CloudFormationPermissions
                Effect: Allow
                Action:
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:RollbackStack
                  - cloudformation:ContinueUpdateRollback
                Resource: "*"
              - Sid: PipelineCrossAccountArtifactsBucket
                Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:GetBucket*
                  - s3:List*
                  - s3:Abort*
                  - s3:DeleteObject*
                  - s3:PutObject*
                Resource: "*"
                Condition:
                  StringNotEquals:
                    s3:ResourceAccount:
                      Ref: AWS::AccountId
              - Sid: PipelineCrossAccountArtifactsKey
                Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                Resource: "*"
                Condition:
                  StringEquals:
                    kms:ViaService:
                      Fn::Sub: s3.${AWS::Region}.amazonaws.com
              - Action: iam:PassRole
                Resource:
                  Fn::Sub: ${CloudFormationExecutionRole.Arn}
                Effect: Allow
              - Sid: CliPermissions
                Action:
                  - cloudformation:DescribeStackEvents
                  - cloudformation:GetTemplate
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateTerminationProtection
                  - sts:GetCallerIdentity
                  - cloudformation:GetTemplateSummary
                Resource: "*"
                Effect: Allow
              - Sid: CliStagingBucket
                Effect: Allow
                Action:
                  - s3:GetObject*
                  - s3:GetBucket*
                  - s3:List*
                Resource:
                  - Fn::Sub: ${StagingBucket.Arn}
                  - Fn::Sub: ${StagingBucket.Arn}/*
              - Sid: ReadVersion
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter${CdkBootstrapVersion}
              - Sid: Refactor
                Effect: Allow
                Action:
                  - cloudformation:CreateStackRefactor
                  - cloudformation:DescribeStackRefactor
                  - cloudformation:ExecuteStackRefactor
                  - cloudformation:ListStackRefactorActions
                  - cloudformation:ListStackRefactors
                  - cloudformation:ListStacks
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: default
      RoleName:
        Fn::Sub: cdk-${Qualifier}-deploy-role-${AWS::AccountId}-${AWS::Region}
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"
      Tags:
        - Key: aws-cdk:bootstrap-role
          Value: deploy
  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        Fn::If:
          - HasCloudFormationExecutionPolicies
          - Ref: CloudFormationExecutionPolicies
          - Fn::If:
            - HasTrustedAccounts
            # The CLI will prevent this case from occurring
            - Ref: AWS::NoValue
            # The CLI will advertise that we picked this implicitly
            - - Fn::Sub: "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      Policies:
        - PolicyDocument:
            Statement:
              - Sid: FullAdministratorAccess
                Effect: Allow
                Action: "*"
                Resource: "*"
              - Sid: AssumeAnyRole
                Effect: Allow
                Action:
                  - sts:AssumeRole
                  - sts:TagSession
                Resource: "*"
              - Sid: IAMFullControl
                Effect: Allow
                Action:
                  - iam:*
                Resource: "*"
              - Sid: OverrideADSKBoundaryForAmplify
                Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:PutRolePermissionsBoundary
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:TagRole
                  - iam:UntagRole
                  - iam:PassRole
                Resource: "*"
                Condition:
                  StringEquals:
                    "iam:PermissionsBoundary": "arn:aws:iam::720853352242:policy/ADSK-Boundary"
              - Sid: EnforcePermissionBoundaryOnRoleCreation
                Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:PutRolePermissionsBoundary
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:TagRole
                  - iam:UntagRole
                Resource: "*"
                Condition:
                  StringEquals:
                    "iam:PermissionsBoundary": "arn:aws:iam::720853352242:policy/ADSK-Boundary"
              - Sid: AllowRoleCreationWithADSKBoundary
                Effect: Allow
                Action:
                  - iam:CreateRole
                Resource: "*"
                Condition:
                  StringEquals:
                    "iam:PermissionsBoundary": "arn:aws:iam::720853352242:policy/ADSK-Boundary"
              - Sid: AllowAmplifyRoleCreation
                Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:PutRolePermissionsBoundary
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:TagRole
                  - iam:UntagRole
                  - iam:PassRole
                Resource: 
                  - "arn:aws:iam::720853352242:role/amplify-*"
                  - "arn:aws:iam::720853352242:role/*Amplify*"
                  - "arn:aws:iam::720853352242:role/*amplify*"
                Condition:
                  StringEquals:
                    "iam:PermissionsBoundary": "arn:aws:iam::720853352242:policy/ADSK-Boundary"
              - Sid: AllowAllRoleCreationWithADSKBoundary
                Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:PutRolePermissionsBoundary
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:TagRole
                  - iam:UntagRole
                  - iam:PassRole
                Resource: "*"
                Condition:
                  StringEquals:
                    "iam:PermissionsBoundary": "arn:aws:iam::720853352242:policy/ADSK-Boundary"
              - Sid: AllowAmplifyDynamicRoleCreation
                Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:PutRolePermissionsBoundary
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:TagRole
                  - iam:UntagRole
                  - iam:PassRole
                Resource: 
                  - "arn:aws:iam::720853352242:role/amplify-*"
                  - "arn:aws:iam::720853352242:role/*Amplify*"
                  - "arn:aws:iam::720853352242:role/*amplify*"
                  - "arn:aws:iam::720853352242:role/*-AmplifyBranchLinkerCustom-*"
                  - "arn:aws:iam::720853352242:role/*-AmplifyBranchLinker-*"
                Condition:
                  StringEquals:
                    "iam:PermissionsBoundary": "arn:aws:iam::720853352242:policy/ADSK-Boundary"
              - Sid: ServiceSpecificPermissions
                Effect: Allow
                Action:
                  - amplify:*
                  - cognito-idp:*
                  - cognito-identity:*
                  - appsync:*
                  - dynamodb:*
                  - lambda:*
                  - logs:*
                  - s3:*
                  - kms:*
                  - apigateway:*
                  - cloudformation:*
                  - cloudfront:*
                  - route53:*
                  - acm:*
                  - events:*
                  - sns:*
                  - sqs:*
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: MaximumAmplifyPermissions
      RoleName:
        Fn::Sub: cdk-${Qualifier}-cfn-exec-role-${AWS::AccountId}-${AWS::Region}
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"

  # Pre-create roles that Amplify typically tries to create to avoid permission boundary issues
  AmplifyBranchLinkerCustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AmplifyBranchLinkerPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - amplify:*
                  - iam:PassRole
                  - iam:GetRole
                  - iam:ListAttachedRolePolicies
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
      RoleName:
        Fn::Sub: amplify-${AWS::AccountId}-AmplifyBranchLinker-${Qualifier}
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"

  AmplifyCustomResourceProviderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AmplifyCustomResourceProviderPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - amplify:*
                  - cloudformation:*
                  - events:*
                  - logs:*
                Resource: "*"
      RoleName:
        Fn::Sub: amplify-${AWS::AccountId}-AmplifyCustomProvider-${Qualifier}
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"

  # Additional Amplify roles that might be created dynamically
  AmplifyBranchLinkerCustomResourceProviderFrameworkOnEventServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AmplifyFrameworkOnEventPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - amplify:*
                  - iam:PassRole
                  - iam:GetRole
                  - iam:ListAttachedRolePolicies
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudformation:*
                Resource: "*"
      RoleName:
        Fn::Sub: amplify-${AWS::AccountId}-AmplifyBranchLinkerFramework-${Qualifier}
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"

  # Pre-create common Amplify role patterns to avoid dynamic creation
  AmplifyBranchLinkerCustomRole1:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AmplifyBranchLinkerPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - amplify:*
                  - iam:PassRole
                  - iam:GetRole
                  - iam:ListAttachedRolePolicies
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
      RoleName:
        Fn::Sub: amplify-${AWS::AccountId}-AmplifyBranchLinkerCustom-1
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"

  AmplifyBranchLinkerCustomRole2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AmplifyBranchLinkerPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - amplify:*
                  - iam:PassRole
                  - iam:GetRole
                  - iam:ListAttachedRolePolicies
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
      RoleName:
        Fn::Sub: amplify-${AWS::AccountId}-AmplifyBranchLinkerCustom-2
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"

  AmplifyBranchLinkerCustomRole3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AmplifyBranchLinkerPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - amplify:*
                  - iam:PassRole
                  - iam:GetRole
                  - iam:ListAttachedRolePolicies
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
      RoleName:
        Fn::Sub: amplify-${AWS::AccountId}-AmplifyBranchLinkerCustom-3
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"

  CdkBoostrapPermissionsBoundaryPolicy:
    Condition: ShouldCreatePermissionsBoundary
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: ExplicitAllowAll
            Action:
              - "*"
            Effect: Allow
            Resource: "*"
          - Sid: DenyAccessIfRequiredPermBoundaryIsNotBeingApplied
            Action:
              - iam:CreateUser
              - iam:CreateRole
              - iam:PutRolePermissionsBoundary
              - iam:PutUserPermissionsBoundary
            Condition:
              StringNotEquals:
                iam:PermissionsBoundary:
                  Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/cdk-${Qualifier}-permissions-boundary-${AWS::AccountId}-${AWS::Region}
            Effect: Deny
            Resource: "*"
          - Sid: DenyPermBoundaryIAMPolicyAlteration
            Action:
              - iam:CreatePolicyVersion
              - iam:DeletePolicy
              - iam:DeletePolicyVersion
              - iam:SetDefaultPolicyVersion
            Effect: Deny
            Resource:
              Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/cdk-${Qualifier}-permissions-boundary-${AWS::AccountId}-${AWS::Region}
          - Sid: DenyRemovalOfPermBoundaryFromAnyUserOrRole
            Action:
              - iam:DeleteUserPermissionsBoundary
              - iam:DeleteRolePermissionsBoundary
            Effect: Deny
            Resource: "*"
        Version: "2012-10-17"
      Description: Bootstrap Permission Boundary
      ManagedPolicyName:
        Fn::Sub: cdk-${Qualifier}-permissions-boundary-${AWS::AccountId}-${AWS::Region}
      Path: /
  CdkBootstrapVersion:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub: /cdk-bootstrap/${Qualifier}/version
      Value: "29"
Outputs:
  BucketName:
    Description: The name of the S3 bucket owned by the CDK toolkit stack
    Value:
      Fn::Sub: ${StagingBucket}
  BucketDomainName:
    Description: The domain name of the S3 bucket owned by the CDK toolkit stack
    Value:
      Fn::Sub: ${StagingBucket.RegionalDomainName}
  FileAssetKeyArn:
    Description: The ARN of the KMS key used to encrypt the asset bucket (deprecated)
    Value:
      Fn::If:
        - CreateNewKey
        - Fn::Sub: ${FileAssetsBucketEncryptionKey.Arn}
        - Fn::Sub: ${FileAssetsBucketKmsKeyId}
    Export:
      Name:
        Fn::Sub: CdkBootstrap-${Qualifier}-FileAssetKeyArn
  ImageRepositoryName:
    Description: The name of the ECR repository which hosts docker image assets
    Value:
      Fn::Sub: ${ContainerAssetsRepository}
  BootstrapVersion:
    Description: The version of the bootstrap resources that are currently mastered
      in this stack
    # This value is purposely duplicated here from the AWS::SSM::Parameter value we define above.
    # {Fn::GetAtt} on an SSM Parameter is eventually consistent, and can fail with "parameter
    # doesn't exist" even after just having been created. To reduce our deploy failure rate, we
    # duplicate the value here and use a build-time test to ensure the two values are the same.
    Value: '29'
  AmplifyBranchLinkerRoleArn:
    Description: The ARN of the pre-created Amplify Branch Linker Custom Resource role
    Value:
      Fn::Sub: ${AmplifyBranchLinkerCustomResourceRole.Arn}
    Export:
      Name:
        Fn::Sub: CdkBootstrap-${Qualifier}-AmplifyBranchLinkerRoleArn
  AmplifyCustomResourceProviderRoleArn:
    Description: The ARN of the pre-created Amplify Custom Resource Provider role
    Value:
      Fn::Sub: ${AmplifyCustomResourceProviderRole.Arn}
    Export:
      Name:
        Fn::Sub: CdkBootstrap-${Qualifier}-AmplifyCustomResourceProviderRoleArn
  AmplifyBranchLinkerFrameworkRoleArn:
    Description: The ARN of the pre-created Amplify Branch Linker Framework role
    Value:
      Fn::Sub: ${AmplifyBranchLinkerCustomResourceProviderFrameworkOnEventServiceRole.Arn}
    Export:
      Name:
        Fn::Sub: CdkBootstrap-${Qualifier}-AmplifyBranchLinkerFrameworkRoleArn

