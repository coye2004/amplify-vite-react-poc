Description: This stack includes resources needed to deploy AWS CDK apps into this environment with ADSK-Boundary compliance
Parameters:
  TrustedAccounts:
    Description: List of AWS accounts that are trusted to publish assets and deploy stacks to this environment
    Default: ""
    Type: CommaDelimitedList
  TrustedAccountsForLookup:
    Description: List of AWS accounts that are trusted to look up values in this environment
    Default: ""
    Type: CommaDelimitedList
  CloudFormationExecutionPolicies:
    Description: List of the ManagedPolicy ARN(s) to attach to the CloudFormation deployment role
    Default: ""
    Type: CommaDelimitedList
  FileAssetsBucketName:
    Description: The name of the S3 bucket used for file assets
    Default: ""
    Type: String
  FileAssetsBucketKmsKeyId:
    Description: Empty to create a new key (default), 'AWS_MANAGED_KEY' to use a managed S3 key, or the ID/ARN of an existing key.
    Default: ""
    Type: String
  ContainerAssetsRepositoryName:
    Description: A user-provided custom name to use for the container assets ECR repository
    Default: ""
    Type: String
  Qualifier:
    Description: An identifier to distinguish multiple bootstrap stacks in the same environment
    Default: hnb659fds
    Type: String
    AllowedPattern: "[A-Za-z0-9_-]{1,10}"
    ConstraintDescription: Qualifier must be an alphanumeric identifier of at most 10 characters
  PublicAccessBlockConfiguration:
    Description: Whether or not to enable S3 Staging Bucket Public Access Block Configuration
    Default: "true"
    Type: String
    AllowedValues:
      - "true"
      - "false"
  BootstrapVariant:
    Type: String
    Default: "AWS CDK: ADSK-Boundary Compliant"
    Description: Describe the provenance of the resources in this bootstrap stack. Change this when you customize the template. To prevent accidents, the CDK CLI will not overwrite bootstrap stacks with a different variant.
  DenyExternalId:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Whether to deny AssumeRole calls with an ExternalId. This prevents calls that are intended to be deputized from accidentally assuming CDK Roles.

Conditions:
  HasTrustedAccounts:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Fn::Join:
              - ""
              - Ref: TrustedAccounts
  HasTrustedAccountsForLookup:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Fn::Join:
              - ""
              - Ref: TrustedAccountsForLookup
  HasCloudFormationExecutionPolicies:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Fn::Join:
              - ""
              - Ref: CloudFormationExecutionPolicies
  HasCustomFileAssetsBucketName:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: FileAssetsBucketName
  CreateNewKey:
    Fn::Equals:
      - ""
      - Ref: FileAssetsBucketKmsKeyId
  UseAwsManagedKey:
    Fn::Equals:
      - "AWS_MANAGED_KEY"
      - Ref: FileAssetsBucketKmsKeyId
  HasCustomContainerAssetsRepositoryName:
    Fn::Not:
      - Fn::Equals:
          - ""
          - Ref: ContainerAssetsRepositoryName
  ShouldDenyExternalId:
    Fn::Equals:
      - "true"
      - Ref: DenyExternalId

Resources:
  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::If:
          - HasCustomFileAssetsBucketName
          - Ref: FileAssetsBucketName
          - Ref: AWS::NoValue
      PublicAccessBlockConfiguration:
        BlockPublicAcls:
          Fn::Equals:
            - "true"
            - Ref: PublicAccessBlockConfiguration
        BlockPublicPolicy:
          Fn::Equals:
            - "true"
            - Ref: PublicAccessBlockConfiguration
        IgnorePublicAcls:
          Fn::Equals:
            - "true"
            - Ref: PublicAccessBlockConfiguration
        RestrictPublicBuckets:
          Fn::Equals:
            - "true"
            - Ref: PublicAccessBlockConfiguration
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID:
                Fn::If:
                  - CreateNewKey
                  - Fn::GetAtt:
                      - StagingBucketKey
                      - Arn
                  - Fn::If:
                      - UseAwsManagedKey
                      - alias/aws/s3
                      - Ref: FileAssetsBucketKmsKeyId
              SSEAlgorithm: aws:kms
            BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 1

  StagingBucketKey:
    Condition: CreateNewKey
    Type: AWS::KMS::Key
    Properties:
      Description: Default key for CDK bootstrap stack
      KeyPolicy:
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action: "kms:*"
            Resource: "*"

  StagingBucketKeyAlias:
    Condition: CreateNewKey
    Type: AWS::KMS::Alias
    Properties:
      AliasName:
        Fn::Sub: alias/cdk-${Qualifier}-bootstrap-${AWS::AccountId}-${AWS::Region}
      TargetKeyId:
        Ref: StagingBucketKey

  FilePublishingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Fn::If:
                  - HasTrustedAccounts
                  - Ref: TrustedAccounts
                  - Ref: AWS::AccountId
            Condition:
              Fn::If:
                - ShouldDenyExternalId
                - "Null":
                    "sts:ExternalId": "true"
                - Ref: AWS::NoValue
        Version: "2012-10-17"
      RoleName:
        Fn::Sub: cdk-${Qualifier}-file-publishing-role-${AWS::AccountId}-${AWS::Region}
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: AssetPublishingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:GetObject*
                  - s3:GetBucketVersioning
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:DeleteObject
                Effect: Allow
                Resource:
                  - Fn::Sub: ${StagingBucket}/*
                  - Fn::GetAtt:
                      - StagingBucket
                      - Arn
              - Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Effect: Allow
                Resource:
                  Fn::If:
                    - CreateNewKey
                    - Fn::GetAtt:
                        - StagingBucketKey
                        - Arn
                    - Fn::If:
                        - UseAwsManagedKey
                        - Fn::Sub: arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3
                        - Ref: FileAssetsBucketKmsKeyId

  ImagePublishingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Fn::If:
                  - HasTrustedAccounts
                  - Ref: TrustedAccounts
                  - Ref: AWS::AccountId
            Condition:
              Fn::If:
                - ShouldDenyExternalId
                - "Null":
                    "sts:ExternalId": "true"
                - Ref: AWS::NoValue
        Version: "2012-10-17"
      RoleName:
        Fn::Sub: cdk-${Qualifier}-image-publishing-role-${AWS::AccountId}-${AWS::Region}
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess

  LookupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Fn::If:
                  - HasTrustedAccountsForLookup
                  - Ref: TrustedAccountsForLookup
                  - Ref: AWS::AccountId
            Condition:
              Fn::If:
                - ShouldDenyExternalId
                - "Null":
                    "sts:ExternalId": "true"
                - Ref: AWS::NoValue
        Version: "2012-10-17"
      RoleName:
        Fn::Sub: cdk-${Qualifier}-lookup-role-${AWS::AccountId}-${AWS::Region}
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/ReadOnlyAccess

  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        Fn::If:
          - HasCloudFormationExecutionPolicies
          - Ref: CloudFormationExecutionPolicies
          - Fn::If:
              - HasTrustedAccounts
              - Ref: AWS::NoValue
              - - Fn::Sub: "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"
      RoleName:
        Fn::Sub: cdk-${Qualifier}-cfn-exec-role-${AWS::AccountId}-${AWS::Region}
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"

  DeploymentActionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS:
                Fn::If:
                  - HasTrustedAccounts
                  - Ref: TrustedAccounts
                  - Ref: AWS::AccountId
            Condition:
              Fn::If:
                - ShouldDenyExternalId
                - "Null":
                    "sts:ExternalId": "true"
                - Ref: AWS::NoValue
        Version: "2012-10-17"
      RoleName:
        Fn::Sub: cdk-${Qualifier}-deploy-role-${AWS::AccountId}-${AWS::Region}
      PermissionsBoundary: "arn:aws:iam::720853352242:policy/ADSK-Boundary"
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess

  ContainerAssetsRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName:
        Fn::If:
          - HasCustomContainerAssetsRepositoryName
          - Ref: ContainerAssetsRepositoryName
          - Fn::Sub: cdk-${Qualifier}-container-assets-${AWS::AccountId}-${AWS::Region}
      LifecyclePolicy:
        LifecyclePolicyText:
          Fn::Sub: |
            {
              "rules": [
                {
                  "rulePriority": 1,
                  "description": "Keep only 10 images",
                  "selection": {
                    "tagStatus": "any",
                    "countType": "imageCountMoreThan",
                    "countNumber": 10
                  },
                  "action": {
                    "type": "expire"
                  }
                }
              ]
            }

  CdkBootstrapVersion:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub: /cdk-bootstrap/${Qualifier}/version
      Value: "29"

Outputs:
  BucketName:
    Description: The name of the S3 bucket used for file assets
    Value:
      Ref: StagingBucket
    Export:
      Name:
        Fn::Sub: CdkBootstrap-${Qualifier}-BucketName
  BucketDomainName:
    Description: The domain name of the S3 bucket used for file assets
    Value:
      Fn::GetAtt:
        - StagingBucket
        - DomainName
    Export:
      Name:
        Fn::Sub: CdkBootstrap-${Qualifier}-BucketDomainName
  BucketRegionalDomainName:
    Description: The regional domain name of the S3 bucket used for file assets
    Value:
      Fn::GetAtt:
        - StagingBucket
        - RegionalDomainName
    Export:
      Name:
        Fn::Sub: CdkBootstrap-${Qualifier}-BucketRegionalDomainName
  FilePublishingRoleArn:
    Description: The ARN of the file publishing role
    Value:
      Fn::GetAtt:
        - FilePublishingRole
        - Arn
    Export:
      Name:
        Fn::Sub: CdkBootstrap-${Qualifier}-FilePublishingRoleArn
  ImagePublishingRoleArn:
    Description: The ARN of the image publishing role
    Value:
      Fn::GetAtt:
        - ImagePublishingRole
        - Arn
    Export:
      Name:
        Fn::Sub: CdkBootstrap-${Qualifier}-ImagePublishingRoleArn
  LookupRoleArn:
    Description: The ARN of the lookup role
    Value:
      Fn::GetAtt:
        - LookupRole
        - Arn
    Export:
      Name:
        Fn::Sub: CdkBootstrap-${Qualifier}-LookupRoleArn
  CloudFormationExecutionRoleArn:
    Description: The ARN of the CloudFormation execution role
    Value:
      Fn::GetAtt:
        - CloudFormationExecutionRole
        - Arn
    Export:
      Name:
        Fn::Sub: CdkBootstrap-${Qualifier}-CloudFormationExecutionRoleArn
  DeploymentActionRoleArn:
    Description: The ARN of the deployment action role
    Value:
      Fn::GetAtt:
        - DeploymentActionRole
        - Arn
    Export:
      Name:
        Fn::Sub: CdkBootstrap-${Qualifier}-DeploymentActionRoleArn
  ContainerAssetsRepositoryName:
    Description: The name of the ECR repository for container assets
    Value:
      Ref: ContainerAssetsRepository
    Export:
      Name:
        Fn::Sub: CdkBootstrap-${Qualifier}-ContainerAssetsRepositoryName
  ContainerAssetsRepositoryUri:
    Description: The URI of the ECR repository for container assets
    Value:
      Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${ContainerAssetsRepository}
    Export:
      Name:
        Fn::Sub: CdkBootstrap-${Qualifier}-ContainerAssetsRepositoryUri
